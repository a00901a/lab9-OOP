using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace ParametricPlot
{
    public partial class Form1 : Form
    {
        // Параметри a та b (за замовчуванням)
        private float a = 50f;
        private float b = 50f;

        // Параметри кривої
        private float step = 0.01f;   // крок зміни t
        private float tMax = 10f;     // максимальне значення t (t ≥ 0)

        // Контроли для введення коефіцієнтів
        private TextBox textBoxA;
        private TextBox textBoxB;
        private Button buttonUpdate;

        public Form1()
        {
            InitializeComponent();
            this.Text = "Параметричне побудова кривої";

            // Створюємо та розташовуємо TextBox-и та кнопку для вводу коефіцієнтів
            textBoxA = new TextBox() { Location = new Point(10, 10), Width = 50, Text = a.ToString() };
            textBoxB = new TextBox() { Location = new Point(70, 10), Width = 50, Text = b.ToString() };
            buttonUpdate = new Button() { Location = new Point(130, 10), Text = "Оновити" };
            buttonUpdate.Click += ButtonUpdate_Click;

            // Додаємо контролі на форму
            Controls.Add(textBoxA);
            Controls.Add(textBoxB);
            Controls.Add(buttonUpdate);

            // Підписка на подію малювання форми
            this.Paint += Form1_Paint;
        }

        private void ButtonUpdate_Click(object sender, EventArgs e)
        {
            // Спроба перетворити текстові значення у числові
            if (float.TryParse(textBoxA.Text, out float newA))
                a = newA;
            if (float.TryParse(textBoxB.Text, out float newB))
                b = newB;

            // Примусове перемальовування форми
            Invalidate();
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

            // Визначення центру форми для відображення осей координат
            float centerX = ClientSize.Width / 2f;
            float centerY = ClientSize.Height / 2f;

            // 1. Малюємо осі X та Y
            using (Pen axisPen = new Pen(Color.Black, 1))
            {
                // Вісь X
                g.DrawLine(axisPen, 0, centerY, ClientSize.Width, centerY);
                // Вісь Y
                g.DrawLine(axisPen, centerX, 0, centerX, ClientSize.Height);
            }

            // 2. Додаємо підписи до осей
            using (Font font = new Font("Arial", 10))
            using (Brush brush = new SolidBrush(Color.Black))
            {
                // Підпис осі X
                g.DrawString("X", font, brush, ClientSize.Width - 20, centerY - 20);
                // Підпис осі Y
                g.DrawString("Y", font, brush, centerX + 10, 5);
            }

            // 3. Малюємо мітки (тік-лінії та значення) на осях (кожні 50 пікселів)
            DrawAxisTicks(g, centerX, centerY);

            // 4. Обчислюємо точки кривої за параметричними рівняннями
            List<PointF> points = new List<PointF>();
            for (float t = 0; t <= tMax; t += step)
            {
                // Обчислення за параметричними рівняннями
                // x = a * (sqrt(t) - sin(t))
                // y = b * (t - cos(t))
                float x = (float)(a * (Math.Sqrt(t) - Math.Sin(t)));
                float y = (float)(b * (t - Math.Cos(t)));

                // Перетворення математичних координат у координати екрану:
                // - зміщення координат так, що центр форми є (0,0)
                // - інверсія осі Y (в Windows Forms Y зростає вниз)
                float screenX = centerX + x;
                float screenY = centerY - y;

                points.Add(new PointF(screenX, screenY));
            }

            // 5. Малюємо криву, з'єднуючи обчислені точки
            if (points.Count > 1)
            {
                using (Pen curvePen = new Pen(Color.Red, 2))
                {
                    g.DrawLines(curvePen, points.ToArray());
                }
            }
        }

        /// <summary>
        /// Метод для малювання тік-ліній та підписів на осях.
        /// </summary>
        private void DrawAxisTicks(Graphics g, float centerX, float centerY)
        {
            using (Pen tickPen = new Pen(Color.Black, 1))
            using (Font font = new Font("Arial", 8))
            using (Brush brush = new SolidBrush(Color.Black))
            {
                // Інтервал між мітками
                int interval = 50;

                // Мітки на осі X (позитивна та негативна сторона)
                for (int x = (int)centerX; x < ClientSize.Width; x += interval)
                {
                    g.DrawLine(tickPen, x, centerY - 3, x, centerY + 3);
                    if (x != (int)centerX) // не малювати нуль
                    {
                        // Значення координати (відносно центру)
                        int value = x - (int)centerX;
                        g.DrawString(value.ToString(), font, brush, x - 10, centerY + 5);
                    }
                }
                for (int x = (int)centerX; x > 0; x -= interval)
                {
                    g.DrawLine(tickPen, x, centerY - 3, x, centerY + 3);
                    if (x != (int)centerX)
                    {
                        int value = x - (int)centerX;
                        g.DrawString(value.ToString(), font, brush, x - 15, centerY + 5);
                    }
                }

                // Мітки на осі Y (позитивна та негативна сторона)
                for (int y = (int)centerY; y < ClientSize.Height; y += interval)
                {
                    g.DrawLine(tickPen, centerX - 3, y, centerX + 3, y);
                    if (y != (int)centerY)
                    {
                        int value = (int)(centerY - y);
                        g.DrawString(value.ToString(), font, brush, centerX + 5, y - 7);
                    }
                }
                for (int y = (int)centerY; y > 0; y -= interval)
                {
                    g.DrawLine(tickPen, centerX - 3, y, centerX + 3, y);
                    if (y != (int)centerY)
                    {
                        int value = (int)(centerY - y);
                        g.DrawString(value.ToString(), font, brush, centerX + 5, y - 7);
                    }
                }
            }
        }
    }
}
